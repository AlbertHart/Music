<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />
    <link rel="shortcut icon" type="image/png" href="favicon.png">
    <title>Music XML</title>

    <link rel="stylesheet" href="css.css" />
    <script src="music_common/alh_sprintf.js?v=2.66"></script>
    <script src="music_common/music_common.js?v=2.66"></script>
    <script src="music_common/dom_common.js?v=2.66"></script>
    <script src="music_common/html_common.js?v=2.66"></script>
    <script src="add_bass_score.js?v=2.66"></script>
    <!--  <script src="music-xml-transpose.ts"> -->
    <!-- this uses the namespace object MDOM to access transpose functions.js -->

    <script>
        var MDOM = new MusicDOM(); 
    </script>

    <style>


        .bass_radio_item{
            display: none !important;
            }
    
            .label_item {
            opacity: 0.5;
            }
            
            .bass_radio_item:checked + label {
            opacity: 1;
            }
    
        label {
        cursor: pointer;   
        }

        .staff_radio_item{
            display: none !important;
            }
    
            .label_item {
            opacity: 0.5;
            }
            
            .staff_radio_item:checked + label {
            opacity: 1;
            }
    
        label {
        cursor: pointer;   
        }
    
        .bass_image {
    
            width: 120px;
            height: 75px;
            padding: 4px;
            border: 1px solid #808080;
        }

        .staff_image {
    
            width: 200px;
            height: 145px;
            padding: 4px;
            border: 1px solid #808080;
        }

        /* Style the menu_tab */
        .menu_tab {
                      overflow: hidden;
                      border: 1px solid #444;
                      background-color: #888;
                      width: 80vw
                    }
                    
                    /* Style the buttons inside the menu_tab */
                    .menu_tab button {
                      background-color: inherit;
                      float: left;
                      border: none;
                      outline: none;
                      cursor: pointer;
                      padding: 14px 16px;
                      transition: 0.3s;
                      font-size: 17px;
                    }
                    
                    /* Change background color of buttons on hover */
                    .menu_tab button:hover {
                      background-color: #666;
                    }
                    
                    /* Create an active/current tablink class */
                    .menu_tab button.active {
                      background-color: #444;
                    }
                    
                    /* Style the menu_tab content */
                    .tabcontent {
                      display: none;
                      padding: 6px 12px;
                      border: 1px solid #aaa;
                      border-top: none;
                    }

            .info {
                color: #206080;
                background-color: #e0f0f7;
                padding: 10px;
            }
            .info img {
                float: left;
                padding-left: 10px;
                padding-right: 10px;
                padding-bottom: 10px;
                width: 33vw;
            }
    
    
       </style>
    
    
    </head>
    
    <body>

    <div style="width:80vw; margin: auto;">

        <img src=images/ice-logo.png style="float: left; width: 200px">
        <p>&nbsp;</p>

    
        <h2>Process MusicXML Files</h2>
        <div id=version>Version: </div>
        <br clear=all>
    
        Load our <a href="https://ice6.github.io/opensheetmusicdisplay/build/">OSMD Demonstration for Transposition</a>
 
        <br clear=all>

                
    
    <p><hr></p>
            
            <h2>Select Desired MusicXML Function</h2>
            <p>Click on the buttons inside the tabbed menu:</p>
            
            <div class="menu_tab">
                <button class="tablinks" name='transpose_tab' onclick="open_tab(this)">Transpose XML</button>
                <button class="tablinks" name='add_bass_tab' onclick="open_tab(this)">Add Bass Notes</button>
                <button class="tablinks" name='trim_score_tab' onclick="open_tab(this)">Trim Score</button>
                <button class="tablinks" name='voice_leading_tab' onclick="open_tab(this)">Voice Leading</button>
                <button class="tablinks" name='melody_chords_tab' onclick="open_tab(this)">Melody Chords</button>
            </div>
            
           
            
            
                    
     <script>
        var parameters = {open_tab: "transpose_tab"};
        var current_tab;

        var xml_string_loaded = score1;
        // xml_string_loaded = score2; // just one measure for testing
        var xml_string_out;
        var show_output = true;


        var event0;
        var item0;
        function open_tab(item) 
        {
            console.log(get_self(item.id, item.name));
            item0 = item;
            tab_name = item.name;   // tab to open

            let i, tabcontent, tablinks;
            tabcontent = document.getElementsByClassName("tabcontent");
            for (let i = 0; i < tabcontent.length; i++) 
            {
                tabcontent[i].style.display = "none";
            }

            // remove 'active' from other tabs
            tablinks = document.getElementsByClassName("tablinks");
            for (let i = 0; i < tablinks.length; i++) 
            {
                tablinks[i].className = tablinks[i].className.replace(" active", "");
            }
            document.getElementById(tab_name).style.display = "block";
            item.className += " active";

            elt = document.getElementById("select_file");
            elt.style.display = "block";

            current_tab = tab_name;
            parameters["open_tab"] = tab_name;
            save_parameter_changes();
        }
     </script>
                
    <div id="transpose_tab" class="tabcontent">


    
    <div class=info>
        <h3>Transpose Score</h3>
        <img src="images/transpose.png" >
        Transpose your score, chords and key signatures to any key.
        <br clear=all>
    </div>
    

        <p class=font_element>
        <label>Transpose Direction</label>
        <select id = "transpose_direction" name="transpose_direction" "   onchange="get_parameter_change(this);">
            <option value = "closest" selected>Closest</option>
            <option value = "up">Move Notes Up</option>
            <option value = "down">Move Notes Down</option>
        </select>
        </p>

        <p class=font_element>
        <label>Transpose to key</label>
        <select id = "transpose_key" name="transpose_key"  onchange="get_parameter_change(this);">
            <option value = "None" selected>None</option>
            <option value = "Ab">Ab / Fm</option>
            <option value = "A">A / F#m</option>
                <!-- <option value = "A#">A#</option> -->
            <option value = "Bb" >Bb / Gm</option>
            <option value = "B">B / G#m</option>
            <option value = "Cb">Cb / Abm</option>
            <option value = "C">C / Am</option>
            <option value = "C#">C# / A#m</option>
            <option value = "Db">Db / Bbm</option>
            <option value = "D">D / Bm</option>
                <!-- <option value = "D#">D#</option> -->
            <option value = "Eb">Eb / Cm</option>
            <option value = "E">E / C#m</option>
            <option value = "F">F / Dm</option>
            <option value = "F#">F# / D#m</option>
            <option value = "Gb">Gb / Ebm</option>
            <option value = "G">G / Em</option>
                <!-- <option value = "G#">G#</option> -->
        </select>

    </div> <!-- TAB -->

    <div id="add_bass_tab" class="tabcontent">
        <div class=info>
            <h3>Add Bass Accompaniment</h3>
            <img src="images/add-bass.png" >
            Add a simple Accompaniment to your score.
            <p>
            For instance, a piano accompaniment for a choral score.
            </p>
            <br clear=all>
        </div>
    
        <h3>Select Accompaniment Format</h3>
        <!--RADIO Images-->
        <input type="radio" class="bass_radio_item" value="" name="bass_format" id="radio_chords" checked
            onchange="get_parameter_change(this);">
            <label class="label_item" for="radio_chords"> <img class="bass_image" src="images/chords.png"> </label>
        
    
        <input type="radio" class="bass_radio_item" value="" name="bass_format" id="radio_oompah"
            onchange="get_parameter_change(this);">
        <label class="label_item" for="radio_oompah"> <img class="bass_image" src="images/oompah.png"> </label>
    
        <input type="radio" class="bass_radio_item" value="" name="bass_format" id="radio_oompapah"
            onchange="get_parameter_change(this);">
        <label class="label_item" for="radio_oompapah"> <img class="bass_image" src="images/oompapah.png"> </label>

        <input type="radio" class="bass_radio_item" value="" name="bass_format" id="radio_longshort"
            onchange="get_parameter_change(this);">
        <label class="label_item" for="radio_longshort"> <img class="bass_image" src="images/longshort.png"> </label>
    
        <input type="radio" class="bass_radio_item" value="" name="bass_format" id="radio_arpeggio"
            onchange="get_parameter_change(this);">
        <label class="label_item" for="radio_arpeggio"> <img class="bass_image" src="images/arpeggio.png"> </label>

        <h3>Select Staffs</h3>
        <!--RADIO Images-->
        <input type="radio" class="staff_radio_item" value="" name="staff_type" id="bass-clef" checked
            onchange="get_parameter_change(this);">
            <label class="label_item" for="bass-clef"> <img class="staff_image" src="images/bass-clef.png"> </label>
        
    
        <input type="radio" class="staff_radio_item" value="" name="staff_type" id="grand-staff"
            onchange="get_parameter_change(this);">
        <label class="label_item" for="grand-staff"> <img class="staff_image" src="images/grand-staff.png"> </label>


    

                
    
    <div id='create_score1' style='display:block;'>
        <button onclick="create_new_score();">Create New Score</button>
        <br>Create New Score to create score,
    </div>

       

</div><!-- TAB -->
                
<div id="trim_score_tab" class="tabcontent">
    

    
    
    
    <div class=info>
        <h3>Trim Score</h3>
        <img src="images/trim-score.png" >
        Select a portion of the score you want to keep with just the desired measures and notes.
        <p></p>
        Create and save a new MusicXML file with just the desired part of the original score.
        <br clear=all>
    </div>


    <table>
        <tr><td>First Measure: </td><td><input type=number id=first_measure style="width: 4em;" value=2
        onchange="get_parameter_change(this);"></td></tr>
        <tr><td>Last Measure: (0 for all)</td><td><input type=number id=last_measure style="width: 4em;" value=3
        onchange="get_parameter_change(this);"></td></tr>
        <tr><td>First Note: </td><td><input type=number id=first_note style="width: 4em;" value=1
        onchange="get_parameter_change(this);"></td></tr>
        <tr><td>Last Note: (0 for all)</td><td><input type=number id=last_note style="width: 4em;" value=0></td></tr>
    </table>
    <br>
    <br> 

    <div id='create_score' style='display:block;'>
        <button onclick="do_trim();">Trim Score</button>
    </div>

    <div id='prepare_output_file' style='display:none;'>
        <button onclick="prepare_output_file();">Prepare Output File</button>
        <br>Click the Download button after 'Prepare Output File'
    </div>

    <p></p>
</div>

    
    <div id=download_div style="display:none;">
        <a id="download_link" target="_blank" download="test.xml" ><button>Click here to Download <span id=download_output></span></button></a>


        </div><!-- TAB -->

        <div id="voice_leading_tab" class="tabcontent">
            
            
            <div class=info>
                <h3>Voice Leading Chords is not complete yet.</h3>
                <img src="images/accompaniment.png" >

                Voice Leading Chords will read a melody from the first part in your score, 
                and add bass and chords notes to accompany the melody.
                <p></p>
                This is designed to be played when aocompianing a singer or soloist.
                <p></p>
                One chord is provided for each chord in the leadsheet - using voice leading and inversions to minimize hand movement 
                while providing accompaniment.
                <br clear=all>
            </div>

            
            <p class=font_element>
                <label>Inversion to start with</label>
                <select id = "starting_inversion" name="starting_inversion" "   onchange="get_parameter_change(this);">
                    <option value = "root" selected>Root</option>
                    <option value = "1st">First</option>
                    <option value = "2nd">2nd</option>
                    <option value = "3rd">3rd if available</option>
                </select>
                        </p>

        </div><!-- TAB -->

        

        <div id="melody_chords_tab" class="tabcontent">
            
            
           
            <div class=info>
                <h3>Melody Chords is not complete yet.</h3>
                <img src="images/piano-jazz.png" >
                Melody Chords will read a melody from the first part in your score, and add bass and chords notes to accompany the melody.
                <br clear=all>
            </div>
            
            <p class=font_element>
                <label>Put 7th in Bass or with Melody</label>
                 <select id = "seventh_position" name="seventh_position" "   onchange="get_parameter_change(this);">
                <option value = "treble" selected>In Melody Chord</option>
                <option value = "bass">With Bass Note</option>
            </select>
        </p>


        </div><!-- TAB -->

        <div id=select_file style='display: none;'>
        <h3> Select Music XML file for processing</h3>
                <input type='file' id="get_file" accept=".xml,.musicxml" onchange='openFile(event);'>

                <input type=hidden name="load_song" id = "load_song" value=1>

                <p class=font_element>
                    <label>Song Name:</label>
                    <input type=text id = "song_name" name="song_name"   onchange="get_parameter_change(this);">
            </p>


            <p class=font_element>
                <label>Show All Debugs in console</label>
                <select id = "show_output" name="show_output" "   onchange="get_parameter_change(this);">
                    <option value = 0 selected >No</option>
                    <option value = 1 >Yes</option>
                </select>
                        </p>  
                        
                    </div>
    
                <div id='prepare_output_file' style='display:none;'>
                    <button onclick="prepare_output_file();">Prepare Output File</button>
                    <br>Click the Download button after 'Prepare Output File'
                </div>
    
                <p></p>
            </div>
    
            
            <div id=download_div style="display:none;">
                <a id="download_link" target="_blank" download="test.xml" ><button>Click here to Download <span id=download_output></span></button></a>
       
    
            <p><hr></p>
    
           
                <button onclick="show_transposed_score();">Show Transposed Score</button>
                <button onclick="copy_transposed_score();">Copy Transposed Score to Clipboard</button>
      
            <div id=transposed_score style="display: none;">Transposed Score</div>

        </div>
    
    </div>

    <script>
    


    function get_parameter_change(element)
    {
        console.log(get_self(element.id, element.name));
 
        let name;
        let value;
        let type = element.type;
        if (element.tagName == "SELECT")
        {
            type = "SELECT";
            name = element.id;
            let index = element.selectedIndex;
            //console.log("NAME: %s index: %s", name, index);
            value = element.options[index].value;
        }
        else if (element.type == "radio")
        {
            name = element.name;
            value = element.id;
        }
        else if (element.type == "number" || element_type == "text")
        {
            name = element.id;
            value = element.value;
        }
        parameters[name] = value;
        console.log("get_parameter_change: type: %s name: %s value: %s", type, name, value);
        save_parameter_changes();
    }

        var song_name;
        var openFile = function (event) {
        	let elt = document.getElementById('get_file'); 
            song_name = elt.files.item(0).name;             
	        console.log("(IN OPEN FILE: song_name: %s", song_name);
            set_element_value("song_name", song_name);
            parameters.song_name = song_name;
            
	        
	        let input = event.target;  
           
            reader = new FileReader();
            reader.onload = fileLoaded;
            flag = 1; // reading
            console.log("SET FLAG: %s READING", flag);
            reader.readAsText(input.files[0]);
        };

       
    
        
    // these read the latest parameters
    function add_to_parameters(svar)
    {
        value = get_element_value(svar);
        //console.log("add_to_parameters: svar: %s: value: %s", svar, value);
        parameters[svar] = value;

    }

    function add_to_parameters_number(svar)
    {
        value = get_element_value(svar);
        //console.log("add_to_parameters: svar: %s: value: %s", svar, value);
        parameters[svar] = Number(value);

    }

 
     // save parameters after every change
     function save_parameter_changes()
    {
        
        console.log(get_self());
        json_string = JSON.stringify(parameters);
        //console.log("json_string: %s", json_string);

        storage_key = parameters.song_name;
        if (!storage_key || storage_key == "")
            storage_key = "musicxml";
        //console.log("setItem for storage_key: %s", storage_key);
        localStorage.setItem(storage_key, json_string);

    }
    function load_parameters(storage_key)
    {   
        if (!storage_key || storage_key == "")
            storage_key = "musicxml";
        console.log("load_parameters: %s", storage_key);
        json_string = localStorage.getItem(storage_key);
        parameters_parsed = JSON.parse(json_string);

        console.log("parameters_parsed: %s", parameters_parsed);

        for (let key in parameters_parsed)
        {
            let value = parameters_parsed[key];
            console.log("load_parameters: key: %s value:  %s", key, value);
            parameters[key] = value;
            set_element_value(key, value);
        }
        

    }

    load_parameters();  // load saved parameters
        




    
    var fileLoaded = function (event) {
        console.log("fileLoaded: event.target.result: %s", event.target.result.substr(0, 100));

        xml_string_loaded = event.target.result;
        console.log("xml_string_loaded length: %s", xml_string_loaded.length);

     
        // store xml and name for reload
        localStorage.setItem('song_data', xml_string_loaded);
        console.log("localStorage.setItem('song_name',%s);", song_name);
        localStorage.setItem('song_name', song_name);

        

        //do_transpose();

    

    }
    
    

        function set_element_value(sid, value)
        {
            console.log(get_self(sid, value));
            elt = document.getElementById(sid);
            if (!elt)
            {
                // see if this is a radio group - by class of elements
                elts = document.getElementsByName(sid);
                for (let ii = 0; ii < elts.length; ii++)
                {
                    elt = elts[ii]
                    //console.log("elt id: %s name: %s", elt.id, elt.name);
                    if (elts[ii].id == value)
                    {
                        elt.checked = true;
                        console.log("ii: %s set check: %s", ii, elts[ii].id);
                        return;
                    }
                }

                // see if this is a tab to open
                tablinks = document.getElementsByClassName("tablinks");
                for (let i = 0; i < tablinks.length; i++) 
                {
                    if (tablinks[i].name == value)
                    {
                        console.log("OPEN TAB: %s", value);
                        open_tab(tablinks[i]);
                        return;
                    }
                }
                
            }
            if (!elt)
            {
                console.error("set_element_value: ELT NOT FOUND: %s", sid);
                return;
            }
            
            if (elt.tagName == "SELECT")
            {
                for(let ii=0; ii < elt.options.length; ii++)
                {
                    elt_value = elt.options[ii].value;
                    console.log("ii: %s sid: %s value: %s (value == elt_value): %s", 
                        ii, sid, elt_value, (value == elt_value) ? "T" : "F" );
                    if (elt_value == value)
                    {
                        elt.selectedIndex = ii;
                        
                        console.log("set_element_value: SELECT: %s value: %s index: %s", sid, ii, value);
                        return;
                    }
                }
                console.error(sid + " - SELECT value not found: " + value, sid, value);
            }
            else
            {
                elt.value = value;
                console.log("set_element_value: sid: %s value: %s elt.value: %s", sid, value, elt.value);
            }
        }

        function get_element_value(sid)
        {
            elt = document.getElementById(sid); 
            if (!elt)
                console.error("elt not found: " + sid);
            if (elt.tagName == "SELECT")
            {
                value = elt.options[elt.selectedIndex].value;
            }
            else
                value = elt.value;
            return(value);
        
        }

        function get_element_number(sid)
        {
            value = get_element_value(sid);
            value = Number(value);
            return(value);
        }


// we really want to use this which our c_chord table
var music_xml_kinds = {
         "major": {short: "maj"},
         "minor": {short: "m"},

         "augmented": {short: "aug"},
         "diminished": {short: "dim"},
         "dominant": {short: "7"},
         "major-seventh": {short: "maj7"},
         "minor-seventh": {short: "m7"},
         "diminished-seventh": {short: "dim7"},
         "augmented-seventh": {short: "aug7"},
         "half-diminished": {short: "m7b5"},
         "major-minor": {short: "min(maj7)"},
         "majorsixth": {short: "maj6"},
         "minor-sixth": {short: "m6"},
         "dominant-ninth": {short: "9"},
         "major-ninth": {short: "maj9"},
         "minor-ninth": {short: "m9"},
         "dominant-11th": {short: "11"},
         "major-11th": {short: "maj11"},
         "minor--11th": {short: "m11"},
         "dominant-13th": {short: "13"},
         "major-13th": {short: "maj13"},
         "minor-13th": {short: "m13"},
         "suspended-second": {short: "sus2"},
         "suspended-fourth": {short: "sus4"},

         "pedal": {short: "ped"},
         "power": {short: "5"},
         "Neapolitan": {short: "neop"},
         "Italian": {short: "ital"},
         "French": {short: "fren"},
         "German": {short: "germ"},
         "Tristan": {short: "trist"},
    };

    // index c_chord_data by musicxml chord_kind
    var musicxml_chords = {};
    var  chord_keys = Object.keys(c_chord_data);
    for (let ii = 0; ii < chord_keys.length; ii++) {
        skey = chord_keys[ii];
        chord_data = c_chord_data[skey];
        chord_kind = chord_data.chord_kind;
        //stext = get_text_from_chord_kind(chord_kind);
        stext = "";
        //console.log("KEY: %s chord_kind: %s stext: %s", skey, chord_kind, stext);
        if (musicxml_chords[chord_kind])
        {
            //console.log("SKIP");
        }
        else
        {
            musicxml_chords[chord_kind] = skey;
        }
    }

    for (let ii = 0; ii < music_xml_kinds.length; ii++)
    {
        kind = music_xml_kinds[ii].kind;
        short = music_xml_kinds[ii].short;
        console.log("kind : %s short: %s chord: %s", kind, short, musicxml_chords[kind]);
    }



 



    

        // <score-partwise version="3.1">
    //     <part-list>
    //         <score-part id="P1">
    //              <part-name print-object="no">MusicXML Part</part-name>
    //         </score-part>
    //     </part-list>
    //     <part id="P1">
    //         <measure number="1" width="208.51">
    //     </part>
    // </score-partwise>
    
    var part_elements = [];

    var score_part_elements = [];

    const SKIP_ERROR = true;    // skip error in called functions



    function create_new_score()
    {

        let ipos = xml_string_loaded.indexOf("<score");

        if (ipos < 0) 
        {
            console.error("<score not found in xml file");
        }
        let xml_header = xml_string_loaded.substr(0, ipos);

        console.log("XML_HEADER: %s", xml_header);

        let bass_format_id;
        let bass_elts = document.getElementsByName("bass_format");
        for (let ii = 0; ii < bass_elts.length; ii++)
        {
            if (bass_elts[ii].checked)
            {
                bass_format_id = bass_elts[ii].id;
                console.log("ii: %s %s", ii, bass_format_id);
                break;
            }
        }
        
       
        switch (bass_format_id)
        {
            case "radio_chords":
                parameters.bass_format = "chords";   
                break;
            case "radio_oompah":
                parameters.bass_format = "oompah";     
                break;
            case "radio_oompapah":
                parameters.bass_format = "oompapah";     
                break;
            case "radio_longshort":
                parameters.bass_format = "longshort";     
                break;
            case "radio_arpeggio":
                parameters.bass_format = "arpeggio";     
                break;
            detault:
                console.error("Bass Format not found: " + bass_format_id)
        }

        let staff_elts = document.getElementsByName("staff_type");
        for (let ii = 0; ii < staff_elts.length; ii++)
        {
            if (staff_elts[ii].checked)
            {
                parameters.staff_format = staff_elts[ii].id;
                console.log("ii: %s %s", ii, parameters.staff_format);
                break;
            }
        }


        console.log("bass_format: %s staff_format: %s individual_notes: %s repeat_last: %s staffs: %s", 
            parameters.bass_format, parameters.staff_format, parameters.individual_notes, parameters.repeat_last, parameters.staffs);




        MDOM.attributes = {divisions: 0, 
            time: {beats: 0, beat_type: 0}, 
            key: {fifths: 0, mode: null},
            staves: null, clef: []};
        attributes = MDOM.attributes;   // use from var

        MDOM.parser = new DOMParser();
        MDOM.dom_object = MDOM.parser.parseFromString(xml_string_loaded, 'application/xml');

        let score_partwise_element = MDOM.dom_object.firstElementChild; // score-partwise

        let score_partwise_children = score_partwise_element.children;
        console.log("score_partwise_element: %s top children: %s", score_partwise_element.tagName, score_partwise_children.length);

       

        // get part-list and part from score-partwise
        for (let iscore_partwise = 0; iscore_partwise < score_partwise_children.length; iscore_partwise++) 
        {
            score_partwise_child = score_partwise_children[iscore_partwise];
            console.log("  iscore_partwise: %s score_partwise_child: %s", iscore_partwise, score_partwise_child.tagName);

            

            // looking for 'part-list' and 'part'
            switch (score_partwise_child.tagName) {

                case "part-list":
                    part_list_element = score_partwise_child;

                    let part_list_children = part_list_element.children;
                    console.log("part_list_element: %s top children: %s", part_list_element.tagName, part_list_children.length);

                    // get 'score-part' from 'part-list'
                    for (let ipart_list = 0; ipart_list < part_list_children.length; ipart_list++) {
                        part_list_child = part_list_children[ipart_list];
                        console.log("    ipart_list: %s part_list_child: %s", ipart_list, part_list_child.tagName);

                        switch (part_list_child.tagName) {
                            case "score-part":

                                // <score-part id="P1">
                                let score_part_element = part_list_child;
                                let score_part_id = score_part_element.getAttribute("id");

                                console.log("score_part_id: %s", score_part_id);
                                score_part_elements.push(score_part_element);
                                break;
                        }
                    }
                    break;

                case "part":
                    part_element = score_partwise_child;

                    // <part id="P2">
                    let part_id = part_element.getAttribute("id");

                    console.log("part_id: %s", part_id);
                    part_elements.push(part_element);
                    break;
            }
        }

        if (parameters.staff_format == "bass-clef")
            starting_staff = 2;
        else
            starting_staff = 1; // make two staffs - grand-staff

        let new_part_index = score_part_elements.length;

        for (let istaff = starting_staff; istaff <= 2; istaff++)
        {

            // add a new score_part_element

            new_part_index++;
            
            console.log("\n *****Add score_part to part_list element");
            let score_part_element = document.createElementNS('', "score-part");
            score_part_element.setAttribute("id", "P" + new_part_index);

            score_part_element.innerHTML = sprintf(`<part-name>Piano</part-name>
    <part-abbreviation>Pno.</part-abbreviation>
    <score-instrument id="P%s-I1">
        <instrument-name>Piano</instrument-name>
        </score-instrument>
    <midi-device id="P%s-I1" port="1" />
    <midi-instrument id="P%s-I1">
        <midi-channel>2</midi-channel>
        <midi-program>1</midi-program>
        <volume>78.7402</volume>
        <pan>0</pan>
        </midi-instrument>\n`, new_part_index, new_part_index, new_part_index);

            part_list_element.appendChild(score_part_element);
            MDOM.show_dom_element(part_list_element);



            console.log("\n***** Add part%s to score_partwise", new_part_index);
            // <part id="P1">
            let new_part_element = document.createElementNS('', "part");
            new_part_element.setAttribute("id", "P" + new_part_index);
            score_partwise_element.appendChild(new_part_element);
            console.log("create new_part_element in score_partwise");

            // read from part element 1
            let part_element1 = part_elements[0];
            let part_element1_children = part_element1.children;
            console.log("part_element1_children: length: %s", part_element1_children.length);

            for (let im = 0; im < part_element1_children.length; im++)
            {
                let measure_element = part_element1_children[im];
                let measure_number = measure_element.getAttribute("number");
                console.log("%s part_element_child: '%s': %s", im, measure_element.tagName, measure_number);



                //if (measure_element.tagName != "measure_element");
                //    continue;

                
                
                

                let new_measure_element = document.createElementNS('', "measure");
                new_measure_element.setAttribute("number", measure_number);
                new_part_element.appendChild(new_measure_element);

                new_measure_html = "";
                new_notes_html = "";
                let first_harmony = true;
                let first_note_in_measure = true;

                measure_element_children = measure_element.children;
                console.log("measure_element_children: length: %s", measure_element_children.length);

                

                    for (let ic = 0; ic < measure_element_children.length; ic++)
                    {
                        measure_child = measure_element_children[ic];

                        // some children get copied 
                        // some get replaced
                        console.log("ic: %s %s", ic, measure_child.tagName);

                        switch (measure_child.tagName)
                        {
                            case "attributes":
                                    if (show_output)
                                        console.log("CASE: %s", measure_child.tagName);

                                

                                    // clone to make a new copy
                                    new_attribute_element = measure_child.cloneNode(true);
                                    if (show_output)
                                        MDOM.show_dom_element(new_attribute_element);

                                    

                                    //let attributes = MDOM.attributes;   // access in this scope

                                    // get the attributes we want to remember
                                    let attribute_children = new_attribute_element.children;
                                    //console.log("CHILDREN: %s", attribute_children.length);
                                    for (let ii = 0; ii < attribute_children.length; ii++)
                                    {
                                        let attribute_child = attribute_children[ii];
                                        console.log("attribute_child %s: %s", ii, attribute_child.tagName);

                                        switch (attribute_child.tagName) 
                                        {
                                            case "clef":
                                                clef_element = attribute_child;
                                                if (istaff == 1)
                                                {
                                                    // new treble staff
                                                    MDOM.change_dom_element_value(clef_element, "sign", "G");
                                                    MDOM.change_dom_element_value(clef_element, "line", 2);
                                                }
                                                else
                                                {
                                                    // new bass staff
                                                    // <clef>
                                                    // <sign>F</sign>
                                                    // <line>4</line>
                                                    // </clef>
                                                    MDOM.change_dom_element_value(clef_element, "sign", "F");
                                                    MDOM.change_dom_element_value(clef_element, "line", 4);
                                                }

                                                break;

                                            case "divisions":
                                                attributes.divisions = MDOM.get_element_value_numeric(attribute_child);
                                                break;

                                            case "instruments":
                                                    break;
                                            
                                            case "key":
                                                // ADH - test key change in the middle of a measure
                                                if (show_output)
                                                    console.log("CASE: %s", attribute_child.tagName);

                                                let key_element = attribute_child

                                                //MDOM.show_dom_element(key_element);
                                                attributes.key.fifths = MDOM.get_dom_element_value_numeric(key_element, "fifths");
                                                if (show_output)
                                                    console.log("fifths: %s typeof: %s", attributes.key.fifths, typeof(attributes.key.fifths) );
                                                attributes.key.mode = MDOM.get_dom_element_value_numeric(key_element, "mode", SKIP_ERROR);

                                                
                                                break;

                                            case "staff-details":
                                                break;

                                            case "staves":
                                                attributes.staves = MDOM.get_element_value_numeric(attribute_child);
                                                break;
                                            
                                            case "time":
                                                //if (show_output)
                                                    console.log("CASE: %s", attribute_child.tagName);
                                                // beats per measure
                                                attributes.time.beats = MDOM.get_dom_element_value_numeric(attribute_child, "beats");
                                                // 4=quarter notes, 8=eighth notes, etc.
                                                attributes.time.beat_type = MDOM.get_dom_element_value_numeric(attribute_child, "beat-type");
                                                console.log("TIME: %s / %s", attributes.time.beats, attributes.time.beat_type);
                                                break;

                                            default:
                                                console.error("Attribute Element not processed: %s", attribute_child.tagName);
                                                break;
            
                                        }
                                    }
                                    //console.log("new_attribute_element.outerHTML: %s", new_attribute_element.outerHTML);
                                    new_measure_html += new_attribute_element.outerHTML;

                                break;
                            case "note":
                                if (show_output)
                                    console.log("CASE: %s first_note_in_measure: %s", measure_child.tagName, first_note_in_measure);
                                if (!first_note_in_measure)
                                    continue;

                                first_note_in_measure = false;

                                // put new notes here
                                //console.log("new_notes_html: %s", new_notes_html);
                                new_measure_html += new_notes_html;
                                break;

                            case "harmony":
                                if (show_output)
                                    console.log("CASE: %s first_harmony: %s", measure_child.tagName, first_harmony);
                                if (!first_harmony)
                                    continue;
                                first_harmony = false;

                                

                                harmony_element = measure_child;

                                root_step = MDOM.get_dom_element_value(harmony_element, "root-step", SKIP_ERROR);
                                //console.log("root-step: %s", root_step);
                                root_alter = MDOM.get_dom_element_value(harmony_element, "root-alter", SKIP_ERROR);
                                //console.log("root-alter: %s", root_alter);
                                bass_step = MDOM.get_dom_element_value(harmony_element, "bass-step", SKIP_ERROR);
                                //console.log("bass-step: %s", bass_step);
                                bass_alter = MDOM.get_dom_element_value(harmony_element, "bass-alter", SKIP_ERROR);
                                //console.log("bass-alter: %s", bass_alter);
                                kind = MDOM.get_dom_element_value(harmony_element, "kind", SKIP_ERROR);
                                kind2 = music_xml_kinds[kind].short;
                                //console.log("kind: %s", kind);

                                sroot = root_step + sharp_flat_from_alter(root_alter);
                                if (bass_step != "")
                                    sbass = "/" + bass_step + sharp_flat_from_alter(bass_alter);
                                else   
                                    sbass = "";
                                console.log("CHORD: %s%s%s kind: %s", sroot, kind2, sbass, kind);



                                // repeat chords in new staffs
                                if ((parameters.staff_format == "grand-staff" && istaff == 1) ||
                                    (parameters.staff_format != "grand-staff" && istaff == 2))
                                {
                                    console.log("harmomy COPY format: %s istaff: %s\n%s", 
                                        parameters.staff_format, istaff, harmony_element.outerHTML);
                                    new_measure_html += "\n    ";
                                    new_measure_html += harmony_element.outerHTML;
                                }

                                if (bass_step)
                                {
                                    first_step = bass_step;
                                    first_alter = bass_alter;
                                }
                                else
                                {
                                    first_step = root_step;
                                    first_alter = root_alter;

                                }

                                // give octave of bass note
                                if (root_step >= "C" && root_step <= "F")
                                    octave = 3;
                                else    
                                    octave = 2;

                                // make new_notes_html from chord
                                // get_note(step, alter, octave, duration, type, accidental, stem)
                                //new_notes_html += "\n";
                                //new_notes_html += get_note(first_step, first_alter, octave, attributes.divisions, "quarter", "", "up");

                                // get notes of chord
                                schord = root_step;
                                if (root_alter > 0)
                                    schord += "#";
                                if (root_alter < 0)
                                    schord += "b";

                                sbass = "";
                                if (bass_step)
                                {
                                    // get notes of chord
                                    sbass = bass_step;
                                    if (bass_alter > 0)
                                        schord += "#";
                                    if (bass_alter < 0)
                                        schord += "b";
                                }
                                schord += music_xml_kinds[kind].short;
;

                                if (istaff == 1)
                                    octave = octave + 1;
  

                                new_notes_html += "\n";

                                let one_beat_duration = (attributes.divisions * 4)  / attributes.time.beat_type;
                                chord_data = {schord: schord, sbass: sbass, octave: octave, one_note: false, start_at: 1, duration: one_beat_duration};
                                
                                let beats_remaining = attributes.time.beats;
                                
                                console.log("parameters.staff_format: %s", parameters.staff_format);
                                if (parameters.staff_format == "grand-staff")
                                {
                                    if (parameters.bass_format == "longshort")
                                    {
                                        if (istaff == 1)
                                        {
                                            // treble clef  - output one rest
                                            new_notes_html += get_rest(one_beat_duration * 2);
                                            beats_remaining--;  // one beat already out
                                            beats_remaining--;  // second beat already out
                                            chord_data.start_at = 2;
                                        }
                                        else
                                        {
                                            // bass clef
                                            // play just one note in bass clef
                                            chord_data.start_at = 1;
                                            chord_data.one_note = true;
                                            chord_data.duration = 2 * one_beat_duration;
                                            new_notes_html += add_chord_notes(chord_data);
                                            new_notes_html += get_rest((attributes.time.beats - 2) * attributes.divisions);
                                            break;  // only one note and rest in staff 1
                                        }
                                    }
                                    else
                                    {
                                        if (istaff == 1)
                                        {
                                            // treble clef  - output one rest
                                            new_notes_html += get_rest(chord_data.duration);
                                            beats_remaining--;  // one beat already out
                                            chord_data.start_at = 2;
                                        }
                                        else
                                        {
                                            // bass clef
                                            // play just one note in bass clef
                                            chord_data.start_at = 1;
                                            chord_data.one_note = true;
                                            new_notes_html += add_chord_notes(chord_data);
                                            new_notes_html += get_rest((attributes.time.beats - 1) * attributes.divisions);
                                            break;  // only one note and rest in staff 1
                                        }
                                    }

                                    
                                }

                                // one beat
                                chord_data.duration = one_beat_duration;

                                console.log("parameters.bass_format: %s", parameters.bass_format);
                                switch (parameters.bass_format)
                                {
                                    case "chords":
                                        new_notes_html += add_chord_notes(chord_data);
                                        beats_remaining--;  // one beat already out
                                        if (beats_remaining > 0)
                                        {
                                            new_notes_html += get_rest(one_beat_duration * beats_remaining);
                                        }
                                        break;
                                    case "longshort":
                                        if (parameters.staff_format != "grand-staff")
                                        {
                                            chord_data.duration = 2 * one_beat_duration;
                                            new_notes_html += add_chord_notes(chord_data);
                                            beats_remaining--;  // one beat already out
                                            beats_remaining--;  // one beat already out
                                        }
                                        if (beats_remaining > 0)
                                        {
                                            // short chord
                                            chord_data.duration = 1 * one_beat_duration;
                                            new_notes_html += add_chord_notes(chord_data);
                                            beats_remaining--;  // one beat already out
                                        }
                                        if (beats_remaining > 0)
                                        {
                                            new_notes_html += get_rest(one_beat_duration * beats_remaining);
                                        }
                                        break;

                                    case "oompah":
                                        if (parameters.staff_format != "grand-staff")
                                        {
                                            // play the first note if not grand staff
                                            chord_data.one_note = true;
                                            new_notes_html += add_chord_notes(chord_data);
                                            beats_remaining--;  // one beat already out
                                        }

                                        chord_data.start_at = 2;
                                        chord_data.one_note = false;
                                        new_notes_html += add_chord_notes(chord_data);
                                        beats_remaining--;  // one beat already out
                                        if (beats_remaining > 0)
                                        {
                                            new_notes_html += get_rest(one_beat_duration * beats_remaining);
                                        }
                                        break;
                                    case "oompapah":
                                        if (parameters.staff_format != "grand-staff")
                                        {
                                            // play the first note if not grand staff
                                            chord_data.one_note = true;
                                            new_notes_html += add_chord_notes(chord_data);
                                            beats_remaining--;  // one beat already out
                                        }

                                        
                                        chord_data.start_at = 2;
                                        chord_data.one_note = false;
                                        new_notes_html += add_chord_notes(chord_data);
                                        beats_remaining--;  // one beat already out

                                        if (beats_remaining > 0)
                                        {
                                            chord_data.start_at = 2;
                                            chord_data.one_note = false;
                                            new_notes_html += add_chord_notes(chord_data);
                                            beats_remaining--;  // one beat already out
                                        }

                                        if (beats_remaining > 0)
                                        {
                                            new_notes_html += get_rest(one_beat_duration * beats_remaining);
                                        }

                                        break;

                                    

                                    case "arpeggio":
                                        console.log("beats remaining: A: %s", beats_remaining);
                                        if (parameters.staff_format != "grand-staff")
                                        {
                                            // play the first note if not grand staff
                                            chord_data.one_note = true;
                                            new_notes_html += add_chord_notes(chord_data);
                                            beats_remaining--;  // one beat already out
                                        }
                                        console.log("beats remaining: B: %s", beats_remaining);
                                        chord_data.start_at = 2;
                                        if (beats_remaining > 1)
                                        {                                         
                                            chord_data.one_note = true;
                                            new_notes_html += add_chord_notes(chord_data);
                                            beats_remaining--;  // one beat already out
                                            chord_data.start_at++;
                                        }
                                        // play final notes
                                        console.log("beats remaining: C: %s", beats_remaining);
                                        if (beats_remaining > 0)
                                        {                                       
                                            chord_data.one_note = false; // play all reamining notes
                                            new_notes_html += add_chord_notes(chord_data);
                                            beats_remaining--;  // one beat already out
                                        }
                                        console.log("beats remaining: D: %s", beats_remaining);
                                        if (beats_remaining > 0)
                                        {          
                                            new_notes_html += get_rest(one_beat_duration * beats_remaining);
                                        }

                                        break;
                                }
                                
                                
                                break;
                    


                            default:
                                if (show_output)
                                    console.log("DEFAULT: %s", measure_child.tagName);
                                if (measure_child.tagName == "print" ||
                                    measure_child.tagName == "direction")
                                {
                                    console.log("SKIP COPY: %s", measure_child.tagName);
                                    break;
                                }
                                // if not processed, clone into new measure
                                console.log("default COPY: %s\n%s",  measure_child.tagName, measure_child.outerHTML);
                                new_measure_html += "\n    ";
                                new_measure_html += measure_child.outerHTML;
                                break;
                        }
                    }
                    new_measure_element.innerHTML = new_measure_html + "\n";
                    console.log("new_measure_element.outerHTML:\n%s", new_measure_element.outerHTML);
                } // end of measures

    
            
            } // end of staffs


        let serializer = new XMLSerializer();
        xml_string_out = serializer.serializeToString(MDOM.dom_object);

        elt = document.getElementById("prepare_output_file");
        elt.style.display = "block";

    }   // end of create_new_score

    
     function add_chord_notes(chord_data)
    {
        // chord_data = {schord: schord, sbass: sbass, octave; octave, one_note: false, start_at: 1, duration: one_beat_duration};

        console.log("add_chord_notes: %s", MDOM.get_caller());
        MDOM.show_object(chord_data, "chord_data");


        chord_step = schord.substr(0,1);  // single letter for chord
        if (schord.substr(1,1) == "#")
        {
            sroot = schord.substr(0,2);
            chord_alter = 1;
            accidental = "#";
            ssub = schord.substr(2);
        }
        else if (schord.substr(2,1) == "#")
        {
            sroot = schord.substr(0,3);
            chord_alter = 1;
            accidental = "#";
            ssub = schord.substr(3);
        }
        else if (schord.substr(1,1) == "b")
        {
            sroot = schord.substr(0,2);
            chord_alter = -1;
            accidental = "b";
            ssub = schord.substr(2);
        }
        else if (schord.substr(2,1) == "b")
        {
            sroot = schord.substr(0,3);
            chord_alter = -1;
            accidental = "b";
            ssub = schord.substr(3);
        }
        else
        {
            sroot = schord.substr(0,1)
            chord_alter = 0;
            accidental = "";
            ssub = schord.substr(1);
        }
        
        console.log("schord: %s chord_step: %s sroot: %s chord_alter: %s accidental: %s ssub: %s",
           schord, chord_step, sroot, chord_alter, accidental, ssub);

        schord_in_c = "C" + ssub;
        let c_chord = c_chord_data[schord_in_c];
        if (!c_chord)
        {
            console.log("CHORD NOT FOUND: %s", c_chord);

            return("");s
        }
        chord_kind = c_chord.chord_kind;
        notes_array = c_chord.notes;
        console.log("schord: %s notes_array: %s", schord, notes_array.join("  "));

        


        // get inversion based on bass note
        inversion = 0;  // none
        console.log("SROOT: %s SBASS: %s ", sroot, sbass);
        if (sbass != "" && sbass != sroot)
        {
            // find first note at or above the bass note
            // chord offset from C
            let root_note_number = note_numbers[sroot];
            let root_note_offset = (root_note_number - note_numbers["C"] + 12) % 12;
            console.log("sroot: %s root_note_number: %s root_note_offset: %s", sroot, root_note_number, root_note_offset);

            let bass_note_number = note_numbers[sbass];
            let bass_note_offset = (bass_note_number - root_note_number + 12) % 12;
            console.log("sbass: %s bass_note_number: %s bass_note_offset: %s", sbass, bass_note_number, bass_note_offset);

            for (let inote = 0; inote < notes_array.length; inote++)
            {
                let chord_note = notes_array[inote];
                let chord_note_number = note_numbers[chord_note];
                let chord_note_offset = (chord_note_number - note_numbers["C"] + 12) % 12;
                console.log("chord_note: %s chord_note_number: %s bass_note_offset: %s chord_note_offset: %s", 
                    chord_note, chord_note_number, bass_note_offset, chord_note_offset);
                if (chord_note_offset >= bass_note_offset)
                {
                    inversion = inote;
                    console.log("SET INVERSION: %s", inversion);
                    break;
                }
            }
            console.log("INVERSION: %s", inversion);

        }
        chord_xml = "";
        chord_last = "";
        
        /*
                xml_score += sprintf(`<harmony color="#000000" default-y="25">
                    <root>
                    <root-step>%s</root-step>
                    <root-alter>%s</root-alter>
                    </root>
                    <kind>%s</kind>
                </harmony>\n`, chord_step, chord_alter, chord_kind); 
        */



        snote_last = "C";
        half_steps_array = [];
        last_note_number = 1;

        half_steps = 0;

        let new_chord = true;   // first note of chord

        console.log("chord_data.one_note: %s ", chord_data.one_note);

        for (let ii = 0; ii < notes_array.length; ii++) {
            // see it there are carried over notes
            inote = (ii + inversion + notes_array.length) % notes_array.length;
            note_letter = notes_array[inote];
            note_number = note_numbers[note_letter];
            console.log("ii: %s inversion: %s inote: %s note_letter: %s note_number: %s last_note_number: %s", 
                ii, inversion, inote, note_letter, note_number, last_note_number);


            
            half_steps_offset = note_number - last_note_number;
            if (half_steps_offset < 0)
                half_steps_offset += 12;
            half_steps = half_steps + half_steps_offset;
            
            last_note_number = note_number;

            


            console.log("ii: %s individual_notes: %s beats: %s new_chord: %s", ii, parameters.individual_notes, attributes.time.beats,  new_chord);

            console.log("ii: %s note_letter: %s half_steps: %s new last_note_number: %s half_steps: %s", 
                ii, note_letter, half_steps, last_note_number, half_steps);

            

            last_note_number = note_number;

            if (ii < chord_data.start_at - 1)
                continue;   // skip notes alread out
            
            // add first note or rest of notes
            chord_note_xml = add_note_to_chord(sroot, octave, half_steps, chord_data.duration, new_chord); 
            chord_xml += chord_note_xml;
            console.log("chord_note_xml: %s", chord_note_xml);

            new_chord = false;
  
            
            if (chord_data.one_note)
                break;  // output just one note

        }
        
        return(chord_xml);


    }

    // sbase = Bb, D, F#
    function add_note_to_chord(sbase, octave, half_steps, duration, new_chord)
    {
        console.log("add_note_to_chord: sbase: %s octave: %s half_steps: %s new_chord: %s  %s",
            sbase, octave, half_steps, new_chord, MDOM.get_caller() );
        base_number = note_numbers[sbase];

        sharp_flat = sharp_flat_from_note[sbase];
        //console.log("sbase: %s base_number: %s sharp_flat: %s", sbase, base_number, sharp_flat);
        new_number = base_number + half_steps;
        new_octave = octave;
        while (new_number > 12)
        {
            new_number -= 12;
            new_octave++;
        }
        if (sharp_flat == "#")
            new_note = note_letters_sharp[new_number];
        else 
            new_note = note_letters_flat[new_number];

        new_note_step = new_note.substr(0,1);
        new_note_alter = get_alter(new_note);
        new_note_accidental = get_accidental(new_note);
        //console.log("add_note_to_chord: half_steps: %s new_number: %s new_note: %s new_note_step: %s new_note_alter: %s accidental: %s", 
        //    half_steps, new_number, new_note, new_note_step, new_note_alter, new_note_accidental);

        if (duration == attributes.divisions)
        {
            stype = "quarter";
        }
        else if (duration == attributes.divisions / 2)
        {
            stype = "eighth";
        }
        else if (duration == attributes.divisions * 2)
        {
            stype = "half";
        }
        else if (duration == attributes.divisions * 4)
        {
            stype = "whole";
        }
        
        
        note_html = `<note default-x="26">\n`;
        if (!new_chord)
        {
            // <chord is in the second note of the chord
            note_html += `<chord />\n`;
        }
        note_html += sprintf(`<pitch>
            <step>%s</step>
            <alter>%s</alter>
            <octave>%s</octave>
            </pitch>
            <duration>%s</duration>
            <instrument id="P1-I1" />
            <type>%s</type>\n`, new_note_step, new_note_alter, new_octave, chord_data.duration, stype);
            
        //note_html += `<lyric default-y="-80" number="part1verse1" >
        //    <syllabic>single</syllabic>
        //    <text>. . . .</text>
        //</lyric>\n`;
        if (new_note_accidental != "")
            note_html += sprintf(`<accidental>%s</accidental>\n`, new_note_accidental)
      
        note_html += `</note>\n`;
        return(note_html);

       

    }


 



     function get_note(step, alter, octave, duration, type, accidental, stem)
     {
         if (alter != "" && alter != 0)
            salter =sprintf("<alter>%s</alter>", alter);
        else   
            salter = "";

        if (accidental)
            saccidental = "        <accidental>" + accidental + "</accidental>";
        else   
            saccidental = "";

        note = sprintf(`    <note default-x="22.43" default-y="-277.97">
        <pitch>
        <step>%s</step>
        <octave>%s</octave>%s
        </pitch>
        <duration>%s</duration>
        <voice>1</voice>
        <type>%s</type>%s
        <stem>%s</stem>
    </note>`, step, octave, salter, duration, type, saccidental, stem); 

        return(note)
     }

     function get_rest(duration)
     {
         console.log("get_rest: duration: %s %s", duration, MDOM.get_caller());
         rest = sprintf(`    <note>
        <rest/>
        <duration>%s</duration>
        <voice>1</voice>
    </note>`, duration);
        return(rest);
     }



        function add_element(parent_element, name, value) {
            new_element = document.createElementNS('', name);
            new_element.innerHTML = value;
            parent_element.appendChild(new_element);
            return (new_element);
        }

        function sharp_flat_from_alter(alter)
        {
            if (alter > 0)
                return("#");
            if (alter < 0)
                return("b");
            return("");
        }

    
    // for voice leading inversions
    function get_chord_notes(chord, inversion_number) 
    {
    console.log("GET_CHORD_NOTES(%s right: %s ninth: %s, %s)", chord.root, chord.rigfht, chord.ninth, inversion_number);

    inversion_save = inversion_number;
    console.log("GET_CHORD_NOTES inversion_save: '%s' %s ==1: %s ==\"1\": %s", 
        inversion_save, typeof (inversion_save), inversion_save == 1, inversion_save == "1");
        
    // apply inverson
    chord.inversion_notes_array = [];
    for (ii = 0; ii < chord.notes_array.length; ii++) {
        new_pos = (chord.notes_array.length + ii + inversion_number) % chord.notes_array.length;
        new_note = chord.notes_array[new_pos];
        chord.inversion_notes_array[ii] = new_note;
        console.log("inversion_number: %s new_pos: %s new_note: %s", inversion_number, new_pos, new_note);
    }
    console.log("get_chord_notes: chord.inversion_notes_array: %s", chord.inversion_notes_array.join(" "));


    letters_html = "";
    match_found = false;
    console.log("chord.inversion_notes_array: %s", chord.inversion_notes_array.join(" "));
    if (inversion_data.last_chord.inversion_notes_array)
        console.log("last_chord.inversion_notes_array: %s", inversion_data.last_chord.inversion_notes_array.join(" "));

    for (ii = 0; ii < chord.inversion_notes_array.length; ii++) {
         // see it there are carried over notes
        note_letter = chord.inversion_notes_array[ii];
 
    
        
        is_duplicate = false;
        if (inversion_data.last_chord.inversion_notes_array)
        {
            for (inote = 0; inote < inversion_data.last_chord.inversion_notes_array.length; inote++) {
                snote_last = inversion_data.last_chord.inversion_notes_array[inote];
                half_steps = Math.abs(note_numbers[snote_last] - note_numbers[note_letter]);
                //console.log("ii: %s inote: %s snote_last: %s note_letter: %s half_steps: %s", ii, inote, snote_last, note_letter, half_steps);
                if (note_numbers[snote_last] == note_numbers[note_letter]) {
                    is_duplicate = true;
                    match_found = true;
                    if (ii == inote)
                        letters_html += "<b>" + note_letter + "</b> ";
                    else {
                        //letters_html += "<b style='color:red;'>**" + note_letter + "</b> ";
                        letters_html += note_letter + " ";
                    }
                    //console.log("is_duplicate: %s %s ii: %s inote: %s", note_letter, snote_last, ii, inote);
                    break;
                }
            }
        }
        
        if (is_duplicate) {
        }
        else
            letters_html += note_letter + " ";
            

    }
        istop++;
        //if (istop > 2)
        //   throw("STOP: " + istop);

    //if (chord.is_tritone)
    //    letters_html += " <b>(T)</b>";
    //if (chord.is_leading)
    //    letters_html += " <b>(L)</b>";
    console.log("USED_LEADING: %s", used_leading);
    if (used_leading)
       letters_html += " <b>(L)</b>";


    letters_html = sprintf("<span style='font-size: %spx;' >%s</span>&nbsp;",
       notes_font_size, letters_html);


    //throw("STOP");
    return letters_html;
}

function get_chord_data(chord_in) {
    let chord = {};
    chord.original = chord_in;
    if (chord.original[1] == 'b' || chord.original[1] == '#') {
        chord.root = chord.original.substr(0, 2);
        chord.right = chord.original.substr(2);
    }
    else 
    {
        chord.root = chord.original.substr(0, 1);
        chord.right = chord.original.substr(1);
    }
    if (!chord.right)
        chord.right = "";
    chord.base_note = "";
    ipos = chord.right.indexOf("/");
    if (ipos >= 0)
    {
        chord.base_note = chord.right.substr(ipos + 1);
        chord.right = chord.right.substr(0,ipos);
    }

    schord = sprintf("%s%s", chord.root, chord.right);

    // do substitutions
    modifier1 = chord.right;
    if (chord.right != "")
    {
        modifier2 = get_substitution(modifier1);
        
        
        // check for substitute chords
        if (modifier2 != "") {
            chord.right = modifier2;
            schord = sprintf("%s%s", chord.root, chord.right);
            console.log("AFTER SUBSTITUTION: %s chord.right: %s", schord, chord.right);
        }
    }



    chord.is_tritone = false;
    chord.is_leading = false;


    chord_data = null;
    console.log("CHORD: %s CHORD.RIGHT: %s", chord.original, chord.right);
    // see if we have the exact chord with chord.right
    skey = "C" + chord.right;
    chord_data = c_chord_data[skey];

    if (chord_data)
        console.log("USE SKEY 1 %s", skey);

    if (!chord_data)
    {
        // see if we have it with 7th instead of 9th
        chord_right2 = get_base_modifier(chord.right);        
        skey = "C" + chord_right2;
        chord_data = c_chord_data[skey];
        if (chord_data)
            console.log("USE SKEY 2 %s", skey);
    }
    
    if (!chord_data)
    {
        // find best fit
    
        keys = Object.keys(c_chord_data);
        for (ii = 0; ii < keys.length; ii++) {
            skey = keys[ii];
            modifier = skey.substr(1);

            //console.log("ii: %s modifier: %s substr: %s",
            //    ii, modifier, chord_right2.substr(0, modifier.length)); // key

            if (chord_right2.substr(0, modifier.length) == modifier) {
                chord_data = c_chord_data[skey];
                console.log("ii: %s modifier: %s substr: %s",
                    ii, modifier, chord_right2.substr(0, modifier.length)); // key
                if (chord_data)
                    console.log("USE SKEY 3 %s", skey);
                break;
            }
        }
    }

    chord_data0 = chord_data;
    console.log("SKEY: %s make_all_ninths: %s chord_data.ninth_ok: %s chord.original: %s", 
        skey, parameters.make_all_ninths, chord_data.ninth_ok, chord.original);
    if (parameters.make_all_ninths && chord_data.ninth_ok && chord.original.indexOf("9") < 0 )
    {
        skey2 = skey.replace("7", "9");
        //chord.original = chord.original.replace("7", "9");
        chord.right = chord.right.replace("7", "9");
        chord_data = c_chord_data[skey2];    // use the ninth chord
        console.log("USE NINTH CHORD: %s --> skeys: %s", skey, skey2);
        skey = skey2;
        if (chord_data)
            console.log("USE SKEY 4 %s", skey);
    }


    if (!chord_data)
        throw sprintf("CHORD NOT FOUND in c_chord_data: %s chord.right: %s", schord, chord.right);
    

    chord.modifier_key = skey;
    chord.is_tritone = chord_data.tritone;
    chord.is_leading = chord_data.leading;
    chord.kind = chord_data.chord_kind;
    chord.degree = chord_data.degree
    console.log("%s USE chord_data: skey: %s chord_data.notes %s is_tritone: %s", 

        chord.original, skey, chord_data.notes.join(" "), chord.is_tritone);

    chord.ninth = "";
    if (chord.right.indexOf("add9") >= 0)
    {
        chord.ninth = ""; // leave root and 9th in chord
    }
    else if (chord.right.indexOf("69") >= 0)
    {
        chord.ninth = ""; // leave root and 9th in chord
    }
    else if (chord.right.indexOf("+9") >= 0 || chord.right.indexOf("#9") >= 0)
        chord.ninth = "#9";
    else if (chord.right.indexOf("-9") >= 0 || chord.right.indexOf("b9") >= 0)
        chord.ninth = "b9"; 
    else if (chord.right.indexOf("9") >= 0 || chord.right.indexOf("11") >= 0 || chord.right.indexOf("13") >= 0)
            chord.ninth = "9"; 
    console.log("chord.right: %s chord.ninth: %s", chord.right, chord.ninth);

    // offset for chord
    chord.notes_array = [];
    for (ii = 0; ii < chord_data.notes.length; ii++) {
        snote = chord_data.notes[ii];



        if (parameters.make_all_ninths && chord.ninth != "" && snote == "C")
        {
            if (chord.ninth == "#9")
                snote = "D#";
            else if (chord.ninth == "b9")
                snote = "Db";
            else    
                snote = "D";
            console.log("MAKE 9th: chord.ninth: %s snote: %s", chord.ninth, snote);
        }
        // transpose_note(what, old_note, old_octave, old_key, new_key)
        new_note_letter = MDOM.transpose_note("inversions", snote, "C", transpose_key);

        chord.notes_array.push(new_note_letter);
        console.log("ii: %s snote: %s chord.ninth: %s new_note_letter: %s", 
            ii, snote, chord.ninth, new_note_letter);
    }
    console.log("get_chord_data: chord.notes_array: %s", chord.notes_array.join(" "));
    

    
    chord.original_right = chord.right;
    chord.original_root = chord.root;
    chord.original_base_note = chord.base_note;

    //show_chord();
    return(chord);
}


    function get_best_inversion(chord) {
        console.log(get_self(chord.original));


        if (!inversion_data.last_chord.inversion_notes_array || inversion_data.last_chord.inversion_notes_array.length == 0)
        {
            console.error("NO last_chord.inversion_notes_array");
            return (0);
        }

        new_inversion = -1;
        used_leading = false;

        console.log("notes_array: %s last_chord.inversion_notes_array: %s", chord.notes_array.join(" "), inversion_data.last_chord.inversion_notes_array.join(" "));
        console.log("last_chord.is_leading: %s", inversion_data.last_chord.is_leading);
        // see if we want a leading tone inversion (tritone)
        if (inversion_data.last_chord.is_leading) {
            new_inversion = get_leading_inversion();
            if (new_inversion >= 0)
            {
                inversion_data.last_chord.inversion = new_inversion;
                return(new_inversion);
            }
            
        }
        

        
        best_half_steps = 999;
        for (inversion_number = 0; inversion_number < chord.notes_array.length; inversion_number++) {
            
            total_half_steps = 0;

            // see it there are carried over notes

            for (inote = 0; inote < inversion_data.last_chord.inversion_notes_array.length; inote++) {
                snote_last = inversion_data.last_chord.inversion_notes_array[inote];

                inversion_offset = (inote + inversion_number + chord.notes_array.length) % chord.notes_array.length;
                snote_new = chord.notes_array[inversion_offset];
                
                offset1 = (note_numbers[snote_new] - note_numbers[snote_last] + 12) % 12;
                offset2 = (note_numbers[snote_last] - note_numbers[snote_new] + 12) % 12;
                half_steps = Math.min(offset1, offset2);
                console.log("inversion_number: %s inversion_offset: %s snote_new: %s snote_last: %s offset1: %s offset2: %s HALF STEPS: %s", 
                    inversion_number, inversion_offset, snote_new, snote_last, offset1, offset2, half_steps);
                total_half_steps += half_steps;

                if (half_steps == 0)
                {
                    // if we find a match, stop
                    total_half_steps = 0;
                    break;
                }
            }

            console.log("inversion_number: %s total_half_steps: %s", inversion_number, total_half_steps);
            if (total_half_steps == 0) {
                console.log("get_best_inversion return: inversion_number from match: %s %s inversion_number: %s inote: %s", inversion_number, snote_last, inversion_number, inote);
                return (inversion_number);
            }
            
            if (total_half_steps < best_half_steps) {
                best_half_steps = total_half_steps;
                new_inversion = inversion_number;
                console.log("new best_half_steps: %s new_inversion: %s", best_half_steps, new_inversion);
            }
                


            
        }

        console.log("best_half_steps: %s ", best_half_steps,);


        console.log("get_best_inversion: return new_inversion: %s", new_inversion);

        return (new_inversion);
    }

    // map alternates to main chord
    var substitutions = [];
    substitutions["maj7"] = "M7";
    substitutions["maj9"] = "M9";

    substitutions["7+9#5"] = "aug7(#9)";

    // Gaug7 can also be written as G+7, G7+ or G7#5
    substitutions["+7"] = "aug7";
    substitutions["+"] = "aug";
    substitutions["7+5"] = "aug7";
    substitutions["7#5"] = "aug7";
    substitutions["7+"] = "aug7";
    substitutions["+7"] = "aug7";
    substitutions["7aug"] = "aug7";
    
    substitutions["79aug"] = "aug9";

    substitutions["9+5"] = "aug9";
    substitutions["9#5"] = "aug9";
    substitutions["9+"] = "aug9";
    substitutions["+9"] = "aug9";
    substitutions["9aug"] = "aug9";

    substitutions["9sus"] = "9sus4";
    substitutions["7sus"] = "7sus4";
   
    substitutions["sus"] = "sus4";




    substitutions["add6(9)"] = "69";
    //substitutions["69"] = "6add9";

    substitutions["2"] = "sus2";
    substitutions["4"] = "sus4";


    substitutions["7+9"] = "7(#9)";
    substitutions["7#9"] = "7(#9)";
    substitutions["7-9"] = "7(b9)";
    substitutions["7b9"] = "7(b9)";

    substitutions["7sus+9"] = "7sus4(#9)";
    substitutions["7sus#9"] = "7sus4(#9)";
    substitutions["7sus-9"] = "7sus4(b9)";
    substitutions["7susb9"] = "7sus4(b9)";

    substitutions["7sus4+9"] = "7sus4(#9)";
    substitutions["7sus4#9"] = "7sus4(#9)";
    substitutions["7sus4-9"] = "7sus4(b9)";
    substitutions["7sus4b9"] = "7sus4(b9)";


    substitutions["+9"] = "(#9)";
    substitutions["-9"] = "(b9)";

    substitutions["(add2)"] = "add2";
    substitutions["(add4)"] = "add4";
    substitutions["(add6)"] = "add6";
    substitutions["(add9)"] = "add9";

    function get_substitution(modifier1)
{
    ssub = "";
    if (modifier1.indexOf("13") >= 0)
    {
        ssub = "15";
    }
    if (modifier1.indexOf("13") >= 0)
    {
        ssub = "13";
    }
    if (modifier1.indexOf("11") >= 0)
    {
        ssub = "11";
    }
    if (ssub != "")
    {
        modifier1 = modifier1.replace(ssub, "9");
        console.log("SSUB 1: %s", modifier1);
    }
    
    console.log("get_substitution modifier1: %s: substitutions[modifier1]: %s", modifier1, substitutions[modifier1]);
    // check for substitute chords
    if (substitutions[modifier1]) {
        modifier2 = substitutions[modifier1];
        
        console.log("get_substitution: %s --> %s",
             modifier1, modifier2);
        if (ssub != "")
        {
            modifier2 = modifier2.replace("9", ssub);
            console.log("SSUB 2: %s", modifier2);
        }
        return(modifier2);
    }
    
    return("");
}

/***
    // for testing inversions
    parameters.make_all_ninths = false;
    var inversion_data = {last_chord: ""};
    let chord = get_chord_data("Eb7");
    MDOM.show(chord, "chord");
    chord.inversion_number = get_best_inversion(chord);
 ***/
    



        </script>
    
    </body >
</html >
