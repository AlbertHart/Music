<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />
    <link rel="shortcut icon" type="image/png" href="favicon.png">
    <title>Music XML</title>

    <link rel="stylesheet" href="css.css" />
    <script src="music_common/alh_sprintf.js?v=2.66"></script>
    <script src="music_common/ABMXML_Lib_Common.js?v=2.66"></script>

    // individual files for each process
    <script src="music_common/ABMXML_Lib_Transpose.js?v=2.66"></script>
    <script src="music_common/ABMXML_Lib_AddBase.js?v=2.66"></script>
    <!--  <script src="music-xml-transpose.ts"> -->
    <!-- this uses the namespace object MLIB to access transpose functions.js -->

   <!-- Global site tag (gtag.js) - Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-152244338-2"></script>
    <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());

    gtag('config', 'UA-152244338-2');
    </script>

    
    <script>
        var MLIB = new MusicDOM(); 

        MusicDOM.prototype.test = function(value)
        {
            console.log("TEST : %s", value);
        }

        console.log("lib_Transpose: Loaded? %s", MLIB.lib_Transpose);
        console.log("lib_AddBase: Loaded? %s", MLIB.lib_AddBase);
        console.log("lib_Common: Loaded? %s", MLIB.lib_Common);

        MLIB.test(21);

        scores = {};

    </script>

        <script src="scores/amazing_grace_score.js?v=2.66"></script>
        <script src="scores/every_time_score.js?v=2.66"></script>


    
    <style>


        .bass_radio_item{
            display: none !important;
            border: 1px solid #808080;
            }

            .bass_radio_item:checked {
            border: 2px solid #0000ff;

            }
    
            .label_item {
            opacity: 0.5;
            }
            
            .bass_radio_item:checked + label {
            opacity: 1;
            }
    
        label {
        cursor: pointer;   
        }

        .staff_radio_item{
            display: none !important;
            border: 1px solid #808080;
            }

            .bass_radio_item:checked {
            border: 2px solid #0000ff;

            }
    
            .label_item {
            opacity: 0.5;
            }
            
            .staff_radio_item:checked + label {
            opacity: 1;
            }
    
        label {
        cursor: pointer;   
        }
    
        .bass_image {
    
            width: 120px;
            height: 75px;
            padding: 4px;
            border: 1px solid #808080;
        }

        .staff_image {
    
            width: 200px;
            height: 145px;
            padding: 4px;
            border: 1px solid #808080;
        }

        /* Style the menu_tab */
        .menu_tab {
                      overflow: hidden;
                      border: 1px solid #444;
                      background-color: #888;
                      width: 80vw
                    }
                    
                    /* Style the buttons inside the menu_tab */
                    .menu_tab button {
                      background-color: inherit;
                      float: left;
                      border: none;
                      outline: none;
                      cursor: pointer;
                      padding: 14px 16px;
                      transition: 0.3s;
                      font-size: 17px;
                    }
                    
                    /* Change background color of buttons on hover */
                    .menu_tab button:hover {
                      background-color: #666;
                    }
                    
                    /* Create an active/current tablink class */
                    .menu_tab button.active {
                      background-color: #444;
                    }
                    
                    /* Style the menu_tab content */
                    .tabcontent {
                      display: none;
                      padding: 6px 12px;
                      border: 1px solid #aaa;
                      border-top: none;
                    }

            .info {
                color: #206080;
                background-color: #e0f0f7;
                padding: 10px;

                width: 80%;
            }
            .info img {
                float: left;
                padding-left: 10px;
                padding-right: 10px;
                padding-bottom: 10px;
                width: 33vw;
            }
    
    
       </style>
    
    
    </head>
    
    <body>

    <div style="width:80vw; margin: auto;">

        <img src=images/ice-logo.png style="float: left; width: 150px">
        <p>&nbsp;</p>

    
        <h2>Process MusicXML Files</h2>
        <div id=version>Version: </div>
        <br clear=all>
    
        Load our <a href="https://ice6.github.io/opensheetmusicdisplay/build/">OSMD Demonstration for Transposition</a>
 
        <br clear=all>

                
    
    <p><hr></p>
            
            <h2>Select Desired MusicXML Function</h2>
            <p>Click on the buttons inside the tabbed menu:</p>
            
            <div class="menu_tab">
                <button class="tablinks" name='transpose_tab' onclick="open_tab(this)">Transpose XML</button>
                <button class="tablinks" name='add_bass_tab' onclick="open_tab(this)">Add Bass Notes</button>
                <button class="tablinks" name='trim_score_tab' onclick="open_tab(this)">Trim Score</button>
                <button class="tablinks" name='voice_leading_tab' onclick="open_tab(this)">Voice Leading</button>
                <button class="tablinks" name='melody_chords_tab' onclick="open_tab(this)">Melody Chords</button>
            </div>
            
           
            
            
                    
     <script>
        var parameters = {open_tab: "transpose_tab"};
        var current_tab;

        var xml_string_loaded;
  
        var output_file_name;

        var show_output = true;


        var event0;
        var item0;
        function open_tab(item) 
        {
            console.log(MLIB.get_self(item.id, item.name));
            item0 = item;
            tab_name = item.name;   // tab to open

            let tabcontent = document.getElementsByClassName("tabcontent");
            for (let ii = 0; ii < tabcontent.length; ii++) 
            {
                tabcontent[ii].style.display = "none";
            }

            // remove 'active' from other tabs
            let tablinks = document.getElementsByClassName("tablinks");
            for (let ii = 0; ii < tablinks.length; ii++) 
            {
                tablinks[ii].className = tablinks[ii].className.replace(" active", "");
            }
            document.getElementById(tab_name).style.display = "block";
            item.className += " active";

            elt = document.getElementById("select_file");
            elt.style.display = "block";

            current_tab = tab_name;
            parameters["open_tab"] = tab_name;
            save_parameter_changes();
        }

        function set_default_parameters(do_save)
        {
            parameters = {
                max_number_of_notes_leading: "4",
                max_number_of_notes_melody: "4",
                bass_format: "radio_chords",
                demonstration_score: "amazing_grace",
                first_measure: "2",
                first_note: "1",
                last_measure: "3",
                open_tab: "transpose_tab",
                seventh_position: "treble",
                show_output: "0",
                staff_type: "bass-clef",
                starting_inversion: "root",
                transpose_direction: "closest",
                transpose_key: "None",
                };

            for (let key in parameters)
            {
                let value = parameters[key];
                set_element_value(key, value);
            }

            // if user clicked set_default_paramaters
            if (do_save)
            {
                save_parameter_changes();
            }
        }

        function clear_score()
        {
            xml_string_loaded = "";
            xml_string_in = "";
            xml_string_out = "";
            let download_div_elt = document.getElementById('download_div');
            download_div_elt.style.display = "none";

        }
     </script>
                
    <div id="transpose_tab" class="tabcontent">


    
    <div class=info>
        <h3>Transpose Score</h3>
        <img src="images/transpose.png" >
        Transpose your score, chords and key signatures to any key.
        <br clear=all>
    </div>
    

        <p class=font_element>
        <label>Transpose Direction</label>
        <select id="transpose_direction" name="transpose_direction"   
            class="parameters" onchange="get_parameter_change(this);">
            <option value = "closest" selected>Closest</option>
            <option value = "up">Move Notes Up</option>
            <option value = "down">Move Notes Down</option>
        </select>
        </p>

        <p class=font_element>
        <label>Transpose to key</label>
        <select id="transpose_key" name="transpose_key"   
            class="parameters" onchange="get_parameter_change(this);">
            <option value = "None" selected>None</option>
            <option value = "Ab">Ab / Fm</option>
            <option value = "A">A / F#m</option>
                <!-- <option value = "A#">A#</option> -->
            <option value = "Bb" >Bb / Gm</option>
            <option value = "B">B / G#m</option>
            <option value = "Cb">Cb / Abm</option>
            <option value = "C">C / Am</option>
            <option value = "C#">C# / A#m</option>
            <option value = "Db">Db / Bbm</option>
            <option value = "D">D / Bm</option>
                <!-- <option value = "D#">D#</option> -->
            <option value = "Eb">Eb / Cm</option>
            <option value = "E">E / C#m</option>
            <option value = "F">F / Dm</option>
            <option value = "F#">F# / D#m</option>
            <option value = "Gb">Gb / Ebm</option>
            <option value = "G">G / Em</option>
                <!-- <option value = "G#">G#</option> -->
        </select>

    </div> <!-- TAB -->

    <div id="add_bass_tab" class="tabcontent">
        <div class=info>
            <h3>Add Bass Accompaniment</h3>
            <img src="images/add-bass.png" >
            Add a simple Accompaniment to your score.
            <p>
            For instance, a piano accompaniment for a choral score.
            </p>
            <br clear=all>
        </div>
    
        <h3>Select Accompaniment Format</h3>
        <!--RADIO Images-->
        <input type="radio" class="bass_radio_item parameters" value="" name="bass_format" id="radio_chords" checked
            onchange="get_parameter_change(this);">
            <label class="label_item" for="radio_chords"> <img class="bass_image" src="images/chords.png"> </label>
        
    
        <input type="radio" class="bass_radio_item parameters" value="" name="bass_format" id="radio_oompah"
            onchange="get_parameter_change(this);">
        <label class="label_item" for="radio_oompah"> <img class="bass_image" src="images/oompah.png"> </label>
    
        <input type="radio" class="bass_radio_item parameters" value="" name="bass_format" id="radio_oompapah"
            onchange="get_parameter_change(this);">
        <label class="label_item" for="radio_oompapah"> <img class="bass_image" src="images/oompapah.png"> </label>

        <input type="radio" class="bass_radio_item parameters" value="" name="bass_format" id="radio_longshort"
            onchange="get_parameter_change(this);">
        <label class="label_item" for="radio_longshort"> <img class="bass_image" src="images/longshort.png"> </label>
    
        <input type="radio" class="bass_radio_item parameters" value="" name="bass_format" id="radio_arpeggio"
            onchange="get_parameter_change(this);">
        <label class="label_item" for="radio_arpeggio"> <img class="bass_image" src="images/arpeggio.png"> </label>

        <h3>Select Staffs</h3>
        <!--RADIO Images-->
        <input type="radio" class="staff_radio_item parameters" value="" name="staff_type" id="bass-clef" checked
            onchange="get_parameter_change(this);">
            <label class="label_item" for="bass-clef"> <img class="staff_image" src="images/bass-clef.png"> </label>
        
    
        <input type="radio" class="staff_radio_item parameters" value="" name="staff_type" id="grand-staff"
            onchange="get_parameter_change(this);">
        <label class="label_item" for="grand-staff"> <img class="staff_image" src="images/grand-staff.png"> </label>


    

                
    
    

       

</div><!-- TAB -->
                
<div id="trim_score_tab" class="tabcontent">
    

    
    
    
    <div class=info>
        <h3>Trim Score</h3>
        <img src="images/trim-score.png" >
        Select a portion of the score you want to keep with just the desired measures and notes.
        <p></p>
        Create and save a new MusicXML file with just the desired part of the original score.
        <br clear=all>
    </div>


    <table>
        <tr><td>First Measure: </td><td><input type=number id=first_measure style="width: 4em;" value=2
            class="parameters" onchange="get_parameter_change(this);"></td></tr>
        <tr><td>Last Measure: (0 for all)</td><td><input type=number id=last_measure style="width: 4em;" value=3
            class="parameters" onchange="get_parameter_change(this);"></td></tr>
        <tr><td>First Note: </td><td><input type=number id=first_note style="width: 4em;" value=1
            class="parameters" onchange="get_parameter_change(this);"></td></tr>
        <tr><td>Last Note: (0 for all)</td><td><input type=number id=last_note style="width: 4em;" value=0></td></tr>
    </table>
    <br>
    <br> 



    

    <p></p>
</div>

    

        </div><!-- TAB -->

        <div id="voice_leading_tab" class="tabcontent">
            
            
            <div class=info>
                <h3>Voice Leading Chords is not complete yet.</h3>
                <img src="images/accompaniment.png" >

                Voice Leading Chords will read a melody from the first part in your score, 
                and add bass and chords notes to accompany the melody.
                <p></p>
                This is designed to be played when aocompianing a singer or soloist.
                <p></p>
                One chord is provided for each chord in the leadsheet - using voice leading and inversions to minimize hand movement 
                while providing accompaniment.
                <br clear=all>
            </div>

            
            <p class=font_element>
                <label>Inversion to start with</label>
                <select id="starting_inversion" name="starting_inversion"   
                    class="parameters" onchange="get_parameter_change(this);">
                    <option value = "root" selected>Root</option>
                    <option value = "1st">First</option>
                    <option value = "2nd">2nd</option>
                    <option value = "3rd">3rd if available</option>
                </select>
                        </p>

            <p class=font_element>
                <label>Max Number of Notes in Chord/label>
                    <select id="max_number_of_notes_leading" name="max_number_of_notes_leading"
                        class="parameters" onchange="get_parameter_change(this);">
                        <option value = "2">2</option>
                        <option value = "3">3</option>
                        <option value = "4" selected>4</option>
                        <option value = "5">5</option>
            </select>
        </p>

        </div><!-- TAB -->

        

        <div id="melody_chords_tab" class="tabcontent">
            
            
           
            <div class=info>
                <h3>Melody Chords is not complete yet.</h3>
                <img src="images/piano-jazz.png" >
                Melody Chords will read a melody from the first part in your score, and add bass and chords notes to accompany the melody.
                <br clear=all>
            </div>

            <p class=font_element>
                <label>Max Number of Notes in Chord - including any melody note</label>
                 <select id="max_number_of_notes_melody" name="max_number_of_notes_melody"     
                    class="parameters"    onchange="get_parameter_change(this);">
                <option value = "2">2</option>
                <option value = "3">3</option>
                <option value = "4" selected>4</option>
                <option value = "5">5</option>
            </select>
        </p>
            
            <p class=font_element>
                <label>Put 7th in Bass or with Melody</label>
                 <select id="seventh_position" name="seventh_position"
                    class="parameters" onchange="get_parameter_change(this);">
                <option value = "treble" selected>In Melody Chord</option>
                <option value = "bass">With Bass Note</option>
            </select>
        </p>


        </div><!-- TAB -->
       

        <div id=select_file style='display: none;'>
        <h3> Select Music XML file for processing</h3>


        <p class=font_element>
            <div id=demonstration_scores>


            </div>
           
            </p>

        <script>
            score_element = document.getElementById("demonstration_scores");
            shtml = `<label>Select a Demonstration Score</label>
                 <select id="demonstration_score" name="demonstration_score"
                 style="width:500px;"
                    class="parameters" onchange="get_parameter_change(this);">\n`;
            let keys = Object.keys(scores);
            for (let iscore = 0; iscore < keys.length; iscore++)
            {
                let key = keys[iscore];
                let score = scores[key];
                if (iscore == 0)
                    selected = "selected";
                else    
                    selected = "";
                shtml += sprintf(`<option value = "%s" %s>%s</option>\n`, key, selected, score.name);
                document.innerHTML = shtml;
            }
            shtml += `</select>`;
            score_element.innerHTML = shtml;
    
        </script>
        

                <input type='file' id="get_file" accept=".xml,.musicxml" onchange='openFile(event);'>

                <input type=hidden name="load_song" id="load_song" value=1>

                <p class=font_element>
                    <label>Song Name:</label>
                    <div id="song_name" >

                    </div>
                        <label>Output File Name:</label>
                        <input type=text id="output_file_name" name="output_file_name"   
                            onchange="change_file_name(this);">
                
            </p>

            <div id='create_score1' style='display:block;'>
                <button onclick="process_xml(xml_string_loaded);">Process XML</button>
                <br>Create New Score to create score,
            </div>


            <p class=font_element>
                <label>Show All Debugs in console</label>
                <select id="show_output" name="show_output"   
                    class="parameters" onchange="get_parameter_change(this);">
                    <option value = 0 selected >No</option>
                    <option value = 1 >Yes</option>
                </select>
                        </p>  
                        
 
    
 
            </div>
    
            
            <div id=download_div style="display:none;">
                <a id="download_link" target="_blank" download="test.xml" >
                    <button>Click here to Download <span id=download_output></span></button>
                </a>
       
    
            <p><hr></p>

                <button onclick="MLIB.show_transposed_score();">Show Transposed Score</button>
                <button onclick="MLIB.copy_transposed_score();">Copy Transposed Score to Clipboard</button>
      
            <div id=transposed_score style="display: none;">Transposed Score</div>

        </div>
        <hr>
        <button onclick="set_default_parameters()">Reset Settings</button>
        <button onclick="clear_score()">Clear Current Score</button>
        <hr>
        <div class=info>
            <p>&nbsp;</p>
            <p>&nbsp;</p>
            <h2>About Process MusicXML Files</h2>
            <img src="images/GitHub-Mark-120px-plus.png" style="width: 120px;">
            <b>Process MusicXML Files</b> is free software and any developer can contribute to the project. 
            Everything you need is in the 
            <a href=https://github.com/AlbertHart/music>GitHub repository</a>. 
            <p></p>
            Please make sure to read and follow the development process described 
            in the README, as well as to provide good quality code and respect all guidelines.
            <p></p>
            Development discussion takes place on GitHub in the Issues tab.
            <p></p>
            Let us know about any ideas you have for new functions or improvements.
            <p></p>
            And let us know if you would like to help with the development efforts.

            <br clear=all>
        
        </div>




    </div>

    <script>
    
     // to save output
function prepare_output_file(output_string, output_file_name)
{

    if (!output_file_name || output_file_name == "")
        output_file_name = "new_score.musicxml";

    console.log("prepare_output_file: output_file_name: %s", output_file_name);


    let properties = {type: 'text/plain'}; // Specify the file's mime-type.

    elt = document.getElementById("download_output");
    elt.innerText = output_file_name;

    data = [output_string];
    console.log("string DATA length: %s", data.length);

    try 
    {
        // Specify the filename using the File constructor, but ...
        console.log("SAVE AS FILE");
        // we will want to get output file name
        file = new File(data, output_file_name, properties);
    } 
    catch (e) 
    {
        // ... fall back to the Blob constructor if that isn't supported.
        console.log("SAVE AS BLOB");
        file = new Blob(data, properties);
    }
    console.log("After create FILE");
    let url = URL.createObjectURL(file);

    download_div_elt = document.getElementById('download_div');
    download_div_elt.style.display = "block";

    download_elt = document.getElementById('download_link');
    download_elt.download = output_file_name;
    download_elt.href = url;
    console.log("After set download_link href");
}


    function get_parameter_change(element, dont_save)
    {
        //console.log(MLIB.get_self(element.id, element.name));
 
        let name;
        let value;
        let type = element.type;
        if (element.tagName == "SELECT")
        {
            type = "SELECT";
            name = element.id;
            let index = element.selectedIndex;
            //console.log("NAME: %s index: %s", name, index);
            value = element.options[index].value;
        }
        else if (element.type == "radio")
        {
            name = element.name;
            value = element.id;
        }
        else if (element.type == "number" || element.type == "text")
        {
            name = element.id;
            value = element.value;
        }
        parameters[name] = value;
        console.log("get_parameter_change: type: %s name: %s value: %s", type, name, value);
        if (!dont_save)
            save_parameter_changes();
    }

    function get_parameters_from_elts()
    {
        parameter_elts = document.getElementsByClassName("parameters");
        let DONT_SAVE = true;
        for (iparm = 0; iparm < parameter_elts.length; iparm++)
        {
            elt = parameter_elts[iparm];
            console.log("type: %s id: %s name: %s tagName: %s value: %s", elt.type, elt.id, elt.name, elt.tagName, elt.value);
            if (elt.type == "number" || elt.type == "text")
            {
                get_parameter_change(elt, DONT_SAVE);
            }
            else if (elt.tagName == "SELECT")
            {
                get_parameter_change(elt, DONT_SAVE);
            }
            else if (elt.type == "radio")
            {
                console.log("RADIO: checked: %s", elt.checked);
                if (elt.checked)
                    get_parameter_change(elt, DONT_SAVE);
            }
            else
            {
                console.log("Unknown Element type: %s", elt.type);
            }
        }
        save_parameter_changes();
    }

    var song_name;
    var openFile = function (event) {
        let elt = document.getElementById('get_file'); 
        if (!elt)
        {
            console.error("File not found");
            throw("file read error");
        }
        song_name = elt.files.item(0).name;             
        console.log("(IN OPEN FILE: song_name: %s", song_name);
        set_element_value("song_name", song_name);
        parameters.song_name = song_name;
        
        
        let input = event.target;  
        
        reader = new FileReader();
        reader.onload = fileLoaded;
        flag = 1; // reading
        console.log("SET FLAG: %s READING", flag);
        reader.readAsText(input.files[0]);
    };

       
    
        
    // these read the latest parameters
    function add_to_parameters(svar)
    {
        value = get_element_value(svar);
        //console.log("add_to_parameters: svar: %s: value: %s", svar, value);
        parameters[svar] = value;

    }

    function add_to_parameters_number(svar)
    {
        value = get_element_value(svar);
        //console.log("add_to_parameters: svar: %s: value: %s", svar, value);
        parameters[svar] = Number(value);

    }

 
     // save parameters after every change
     function save_parameter_changes()
    {
        
        console.log(MLIB.get_self());
        json_string = JSON.stringify(parameters);
        //console.log("json_string: %s", json_string);

        storage_key = parameters.song_name;
        if (!storage_key || storage_key == "")
            storage_key = "musicxml";
        //console.log("setItem for storage_key: %s", storage_key);
        localStorage.setItem(storage_key, json_string);

    }
    function load_parameters(storage_key)
    {   
        if (!storage_key || storage_key == "")
            storage_key = "musicxml";
        console.log("load_parameters: %s", storage_key);
        json_string = localStorage.getItem(storage_key);
        parameters_parsed = JSON.parse(json_string);

        console.log("parameters_parsed: %s", parameters_parsed);

        for (let key in parameters_parsed)
        {
            let value = parameters_parsed[key];
            console.log("load_parameters: key: %s value:  %s", key, value);
            parameters[key] = value;
            set_element_value(key, value);
        }
        

    }

    

    window.onload = function() 
    {
        load_parameters();  // load saved parameters
        //dom not only ready, but everything is loaded
        let tab = MLIB.get_url_var("tab");
        if (tab !== "")
            open_tab_by_name(tab + "_tab");
    };


    function open_tab_by_name(tab_name)
    {
        console.log(MLIB.get_self(tab_name));
         // see if this is a tab to open
         tablinks = document.getElementsByClassName("tablinks");
        for (let ii = 0; ii < tablinks.length; ii++) 
        {
            //console.log("I: %s tablinks[ii].name: %s tab_name: %s ", ii, tablinks[ii].name, tab_name);
            if (tablinks[ii].name == tab_name)
            {
                //console.log("OPEN TAB: %s", tab_name);
                open_tab(tablinks[ii]);
                return;
            }
        }
        console.error("TAB NOT FOUND: %s", tab_name);
    }
        
    function process_xml(xml_string_in)
    {
        get_parameters_from_elts();


        let ipos = parameters.open_tab.indexOf("_tab");
        if (ipos > 0)
            output_file_name = parameters.open_tab.substr(0, ipos) + ".musicxml";

        if (!xml_string_in || xml_string_in == "")
        {
            let score_no = parameters.demonstration_score;
            let score = scores[score_no];
            parameters.song_name = score.name;
            console.log("score_no: %s song_name: %s", score_no, parameters.song_name);
            xml_string_in = score.xml;
        }

        if (!xml_string_in || xml_string_in == "")
        {
            consolelog("NO XML STRING");
            alert("XML Not Loaded");
            return;
        }

        MLIB.xml_string_out = "";

        switch (parameters.open_tab)
        {
            case 'transpose_tab':
                MLIB.xml_string_out = MLIB.transpose_xml(parameters, xml_string_in);
                break;
            case 'add_bass_tab':
                MLIB.xml_string_out = MLIB.add_bass_to_xml(parameters, xml_string_in);
                break;
            case 'trim_score_tab':
                MLIB.xml_string_out = do_trim_score(parameters, xml_string_in);
                break;
            case 'voice_leading_tab':
                MLIB.xml_string_out = do_voice_leading(parameters, xml_string_in);
                break;
            case 'melody_chords_tab':
                MLIB.xml_string_out = do_melody_chords(parameters, xml_string_in);
                break;
        }

        if (MLIB.xml_string_out && MLIB.xml_string_out != "")
        {
            elt = document.getElementById("transposed_score");
            elt.innerText = MLIB.xml_string_out;
        }

        // build output file name
        if (song_name)
        {
            output_file_name = song_name;
            let ipos3 = output_file_name.lastIndexOf(".");
            if (ipos3 >= 0)
                output_file_name = output_file_name.substr(0, ipos3) + "-" + parameters.transpose_key + output_file_name.substr(ipos);
            set_element_value("output_file_name", output_file_name);
        }


        // create the output file ready for download
        prepare_output_file(MLIB.xml_string_out, output_file_name);


    }

     // to save output
function prepare_output_file(output_string, output_file_name)
{

    if (!output_file_name || output_file_name == "")
        output_file_name = "new_score.musicxml";

    console.log("prepare_output_file: output_file_name: %s", output_file_name);


    let properties = {type: 'text/plain'}; // Specify the file's mime-type.

    elt = document.getElementById("download_output");
    elt.innerText = output_file_name;

    data = [output_string];
    console.log("string DATA length: %s", data.length);

    try 
    {
        // Specify the filename using the File constructor, but ...
        console.log("SAVE AS FILE");
        // we will want to get output file name
        file = new File(data, output_file_name, properties);
    } 
    catch (e) 
    {
        // ... fall back to the Blob constructor if that isn't supported.
        console.log("SAVE AS BLOB");
        file = new Blob(data, properties);
    }
    console.log("After create FILE");
    let url = URL.createObjectURL(file);

    download_div_elt = document.getElementById('download_div');
    download_div_elt.style.display = "block";

    download_elt = document.getElementById('download_link');
    download_elt.download = output_file_name;
    download_elt.href = url;
    console.log("After set download_link href");
}

   

    
    var fileLoaded = function (event) {
        console.log("fileLoaded: event.target.result: %s", event.target.result.substr(0, 100));

        xml_string_loaded = event.target.result;
        console.log("xml_string_loaded length: %s", xml_string_loaded.length);

     
        // store xml and name for reload
        localStorage.setItem('song_data', xml_string_loaded);
        console.log("localStorage.setItem('song_name',%s);", song_name);
        localStorage.setItem('song_name', song_name);

        process_xml(xml_string_loaded);

    }

        function set_element_value(sid, value)
        {
            console.log(MLIB.get_self(sid, value));
            elt = document.getElementById(sid);
            if (!elt)
            {
                // see if this is a radio group - by class of elements
                elts = document.getElementsByName(sid);
                for (let ii = 0; ii < elts.length; ii++)
                {
                    elt = elts[ii]
                    //console.log("elt id: %s name: %s", elt.id, elt.name);
                    if (elts[ii].id == value)
                    {
                        elt.checked = true;
                        console.log("ii: %s set check: %s", ii, elts[ii].id);
                        return;
                    }
                }

                open_tab_by_name(value);


            }
            if (!elt)
            {
                console.error("set_element_value: ELT NOT FOUND: %s", sid);
                return;
            }
            
            if (elt.tagName == "SELECT")
            {
                for(let ii=0; ii < elt.options.length; ii++)
                {
                    elt_value = elt.options[ii].value;
                    console.log("ii: %s sid: %s value: %s (value == elt_value): %s", 
                        ii, sid, elt_value, (value == elt_value) ? "T" : "F" );
                    if (elt_value == value)
                    {
                        elt.selectedIndex = ii;
                        
                        console.log("set_element_value: SELECT: %s value: %s index: %s", sid, ii, value);
                        return;
                    }
                }
                console.error(sid + " - SELECT value not found: " + value, sid, value);
            }
            else
            {
                elt.value = value;
                console.log("set_element_value: sid: %s value: %s elt.value: %s", sid, value, elt.value);
            }
        }

        function get_element_value(sid)
        {
            elt = document.getElementById(sid); 
            if (!elt)
                console.error("elt not found: " + sid);
            if (elt.tagName == "SELECT")
            {
                value = elt.options[elt.selectedIndex].value;
            }
            else
                value = elt.value;
            return(value);
        
        }

        function get_element_number(sid)
        {
            value = get_element_value(sid);
            value = Number(value);
            return(value);
        }


// we really want to use this which our c_chord table
var music_xml_kinds = {
         "major": {short: "maj"},
         "minor": {short: "m"},

         "augmented": {short: "aug"},
         "diminished": {short: "dim"},
         "dominant": {short: "7"},
         "major-seventh": {short: "maj7"},
         "minor-seventh": {short: "m7"},
         "diminished-seventh": {short: "dim7"},
         "augmented-seventh": {short: "aug7"},
         "half-diminished": {short: "m7b5"},
         "major-minor": {short: "min(maj7)"},
         "majorsixth": {short: "maj6"},
         "minor-sixth": {short: "m6"},
         "dominant-ninth": {short: "9"},
         "major-ninth": {short: "maj9"},
         "minor-ninth": {short: "m9"},
         "dominant-11th": {short: "11"},
         "major-11th": {short: "maj11"},
         "minor--11th": {short: "m11"},
         "dominant-13th": {short: "13"},
         "major-13th": {short: "maj13"},
         "minor-13th": {short: "m13"},
         "suspended-second": {short: "sus2"},
         "suspended-fourth": {short: "sus4"},

         "pedal": {short: "ped"},
         "power": {short: "5"},
         "Neapolitan": {short: "neop"},
         "Italian": {short: "ital"},
         "French": {short: "fren"},
         "German": {short: "germ"},
         "Tristan": {short: "trist"},
    };

    





 



    

        // <score-partwise version="3.1">
    //     <part-list>
    //         <score-part id="P1">
    //              <part-name print-object="no">MusicXML Part</part-name>
    //         </score-part>
    //     </part-list>
    //     <part id="P1">
    //         <measure number="1" width="208.51">
    //     </part>
    // </score-partwise>
    
    var part_elements = [];

    var score_part_elements = [];


    
  

    



        </script>
    
    </body >
</html >
